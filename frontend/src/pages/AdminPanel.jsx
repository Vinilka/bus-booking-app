import { useEffect, useState } from "react";
import axios from "axios";
import "./AdminPanel.css";

const ROUTE_API = "http://localhost:5000/api/routes";
const BUS_API = "http://localhost:5000/api/buses";

function AdminPanel() {
  const [routes, setRoutes] = useState([]);
  const [buses, setBuses] = useState([]);
  const [newRoute, setNewRoute] = useState({
    name: "",
    stops: "",
    departure_time: "",
    arrival_time: "",
    base_price: "",
  });

  const token = localStorage.getItem("token");
  const role = localStorage.getItem("userRole");
  const headers = { Authorization: `Bearer ${token}` };

  const canEdit = role === "admin" || role === "moderator";
  const canDelete = role === "admin";

  useEffect(() => {
    loadRoutes();
    loadBuses();
  }, []);

  const loadRoutes = async () => {
    try {
      const res = await axios.get(ROUTE_API);
      setRoutes(res.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤:", err);
    }
  };

  const loadBuses = async () => {
    try {
      const res = await axios.get(BUS_API);
      setBuses(res.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ–±—É—Å–æ–≤:", err);
    }
  };

  const handleChange = (index, field, value) => {
    const updated = [...routes];
    updated[index] = {
      ...updated[index],
      [field]: field === "stops" ? value.split(",").map((s) => s.trim()) : value,
    };
    setRoutes(updated);
  };

  const handleSave = async (route) => {
    const payload = {
      name: route.name,
      stops: route.stops,
      departure_time: route.departure_time,
      arrival_time: route.arrival_time,
      base_price: route.base_price,
    };

    try {
      await axios.put(`${ROUTE_API}/${route._id}`, payload, { headers });
      await loadRoutes();
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
      console.error(err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç?")) return;
    try {
      await axios.delete(`${ROUTE_API}/${id}`, { headers });
      await loadRoutes();
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞");
      console.error(err);
    }
  };

  const handleNewChange = (field, value) => {
    setNewRoute({ ...newRoute, [field]: value });
  };

  const handleAddRoute = async () => {
    const { name, stops, departure_time, arrival_time, base_price } = newRoute;

    if (!name || !stops || !departure_time || !arrival_time || !base_price) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
      return;
    }

    const payload = {
      name,
      stops: stops.split(",").map((s) => s.trim()),
      departure_time,
      arrival_time,
      base_price,
    };

    try {
      await axios.post(ROUTE_API, payload, { headers });
      setNewRoute({ name: "", stops: "", departure_time: "", arrival_time: "", base_price: "" });
      await loadRoutes();
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞");
      console.error(err);
    }
  };

  const getBusByRoute = (routeId) => {
    const bus = buses.find((b) => b.route_id === routeId);
    return bus ? `${bus.driver} | ${bus.status}` : "‚Äî";
  };

  return (
    <div className="admin-panel">
      <h2>üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</h2>

      <table>
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
            <th>–û—Å—Ç–∞–Ω–æ–≤–∫–∏</th>
            <th>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</th>
            <th>–ü—Ä–∏–±—ã—Ç–∏–µ</th>
            <th>–¶–µ–Ω–∞ (BYN)</th>
            <th>–ê–≤—Ç–æ–±—É—Å</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {routes.map((route, index) => (
            <tr key={route._id}>
              <td>
                <input
                  value={route.name}
                  onChange={(e) => handleChange(index, "name", e.target.value)}
                />
              </td>
              <td>
                <input
                  value={route.stops.join(", ")}
                  onChange={(e) => handleChange(index, "stops", e.target.value)}
                />
              </td>
              <td>
                <input
                  value={route.departure_time}
                  onChange={(e) => handleChange(index, "departure_time", e.target.value)}
                />
              </td>
              <td>
                <input
                  value={route.arrival_time}
                  onChange={(e) => handleChange(index, "arrival_time", e.target.value)}
                />
              </td>
              <td>
                <input
                  type="number"
                  value={route.base_price}
                  onChange={(e) => handleChange(index, "base_price", e.target.value)}
                />
              </td>
              <td>{getBusByRoute(route._id)}</td>
              <td>
                {canEdit && <button onClick={() => handleSave(route)}>üíæ</button>}
                {canDelete && (
                  <button onClick={() => handleDelete(route._id)} className="btn-danger">
                    üóëÔ∏è
                  </button>
                )}
              </td>
            </tr>
          ))}

          {canEdit && (
            <tr>
              <td>
                <input
                  value={newRoute.name}
                  onChange={(e) => handleNewChange("name", e.target.value)}
                />
              </td>
              <td>
                <input
                  value={newRoute.stops}
                  onChange={(e) => handleNewChange("stops", e.target.value)}
                  placeholder="–ú–∏–Ω—Å–∫, –ù–∞—Ä–æ—á—å"
                />
              </td>
              <td>
                <input
                  value={newRoute.departure_time}
                  onChange={(e) => handleNewChange("departure_time", e.target.value)}
                />
              </td>
              <td>
                <input
                  value={newRoute.arrival_time}
                  onChange={(e) => handleNewChange("arrival_time", e.target.value)}
                />
              </td>
              <td>
                <input
                  type="number"
                  value={newRoute.base_price}
                  onChange={(e) => handleNewChange("base_price", e.target.value)}
                />
              </td>
              <td>‚Äî</td>
              <td>
                <button onClick={handleAddRoute}>‚ûï</button>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}

export default AdminPanel;