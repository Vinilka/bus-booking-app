import mongoose from "mongoose";
import dotenv from "dotenv";
import bcrypt from "bcryptjs";

import Route from "./models/Route.js";
import Bus from "./models/Bus.js";
import Driver from "./models/Driver.js";
import User from "./models/User.js";
import Booking from "./models/Booking.js";

dotenv.config();
const MONGO_URI = process.env.MONGO_URI;

const run = async () => {
  try {
    await mongoose.connect(MONGO_URI);
    console.log("üü¢ MongoDB connected");

    await Promise.all([
      Route.deleteMany(),
      Bus.deleteMany(),
      Driver.deleteMany(),
      User.deleteMany(),
      Booking.deleteMany(),
    ]);

    // Define Naroch child stops
    const narochStops = [
      "–¥–µ—Ä–µ–≤–Ω—è –ù–∞—Ä–æ—á—å",
      "–í–æ–∫–∑–∞–ª –ù–∞—Ä–æ—á—å",
      "–°–∞–Ω–∞—Ç–æ—Ä–∏–π –ù–∞—Ä–æ—á—å",
      "–°–∞–Ω–∞—Ç–æ—Ä–∏–π –ë–µ–ª–∞—è –†—É—Å—å",
      "–°–∞–Ω–∞—Ç–æ—Ä–∏–π –ù–∞—Ä–æ—á–∞–Ω—Å–∫–∏–π –ë–µ—Ä–µ–≥",
      "—Å–∞–Ω–∞—Ç–æ—Ä–∏–π –ü—Ä–∏–æ–∑–µ—Ä–Ω—ã–π",
      "—Å–∞–Ω–∞—Ç–æ—Ä–∏–π –°–ø—É—Ç–Ω–∏–∫",
      "–ó—É–±—Ä–µ–Ω–æ–∫",
      "—Å–∞–Ω–∞—Ç–æ—Ä–∏–π –°–æ—Å–Ω—ã",
      "—Å–∞–Ω–∞—Ç–æ—Ä–∏–π –ù–∞—Ä–æ—á–∞–Ω–∫–∞",
    ];

    // Route 1: –ú–∏–Ω—Å–∫ ‚Üí –ú–æ–ª–æ–¥–µ—á–Ω–æ ‚Üí –ù–∞—Ä–æ—á—å (all Naroch stops)
    const route1_stops = ["–ú–∏–Ω—Å–∫", "–ú–æ–ª–æ–¥–µ—á–Ω–æ", ...narochStops];
    const route1_back_stops = [
      ...narochStops.slice().reverse(),
      "–ú–æ–ª–æ–¥–µ—á–Ω–æ",
      "–ú–∏–Ω—Å–∫",
    ];
    // Route 2: –ú–∏–Ω—Å–∫ ‚Üí –ù–∞—Ä–æ—á—å (all Naroch stops, no –ú–æ–ª–æ–¥–µ—á–Ω–æ)
    const route2_stops = ["–ú–∏–Ω—Å–∫", ...narochStops];
    const route2_back_stops = [...narochStops.slice().reverse(), "–ú–∏–Ω—Å–∫"];
    // Route 3: –ú–∏–Ω—Å–∫ ‚Üí –ó–∞–Ω–∞—Ä–æ—á—å
    const route3_stops = ["–ú–∏–Ω—Å–∫", "–ó–∞–Ω–∞—Ä–æ—á—å"];
    const route3_back_stops = ["–ó–∞–Ω–∞—Ä–æ—á—å", "–ú–∏–Ω—Å–∫"];

    // Insert routes (both directions)
    const allRoutes = await Route.insertMany([
      {
        name: "–ú–∏–Ω—Å–∫ ‚Äî –ú–æ–ª–æ–¥–µ—á–Ω–æ ‚Äî –ù–∞—Ä–æ—á—å",
        stops: route1_stops,
        departure_time: "08:00",
        arrival_time: "12:00",
        base_price: 15,
      },
      {
        name: "–ù–∞—Ä–æ—á—å ‚Äî –ú–æ–ª–æ–¥–µ—á–Ω–æ ‚Äî –ú–∏–Ω—Å–∫",
        stops: route1_back_stops,
        departure_time: "14:00",
        arrival_time: "18:00",
        base_price: 15,
      },
      {
        name: "–ú–∏–Ω—Å–∫ ‚Äî –ù–∞—Ä–æ—á—å",
        stops: route2_stops,
        departure_time: "09:00",
        arrival_time: "13:00",
        base_price: 15,
      },
      {
        name: "–ù–∞—Ä–æ—á—å ‚Äî –ú–∏–Ω—Å–∫",
        stops: route2_back_stops,
        departure_time: "15:00",
        arrival_time: "19:00",
        base_price: 15,
      },
      {
        name: "–ú–∏–Ω—Å–∫ ‚Äî –ó–∞–Ω–∞—Ä–æ—á—å",
        stops: route3_stops,
        departure_time: "10:00",
        arrival_time: "12:30",
        base_price: 10,
      },
      {
        name: "–ó–∞–Ω–∞—Ä–æ—á—å ‚Äî –ú–∏–Ω—Å–∫",
        stops: route3_back_stops,
        departure_time: "16:00",
        arrival_time: "18:30",
        base_price: 10,
      },
    ]);

    // Create some buses for these routes
    const buses = await Bus.insertMany([
      {
        plate_number: "AA-1234",
        model: "Mercedes Sprinter",
        status: "–≥–æ—Ç–æ–≤",
        seats_total: 20,
        disabled_seats: [3, 4],
        route_ids: [allRoutes[0]._id],
        current_driver: null,
      },
      {
        plate_number: "BB-5678",
        model: "VW Crafter",
        status: "–≥–æ—Ç–æ–≤",
        seats_total: 18,
        disabled_seats: [],
        route_ids: [allRoutes[2]._id],
        current_driver: null,
      },
      {
        plate_number: "CC-9012",
        model: "Ford Transit",
        status: "–≥–æ—Ç–æ–≤",
        seats_total: 15,
        disabled_seats: [],
        route_ids: [allRoutes[4]._id],
        current_driver: null,
      },
    ]);

    // Generate 30 random users
    const names = [
      "–ò–≤–∞–Ω",
      "–ú–∞—Ä–∏—è",
      "–ê–ª–µ–∫—Å–µ–π",
      "–û–ª—å–≥–∞",
      "–î–º–∏—Ç—Ä–∏–π",
      "–ï–ª–µ–Ω–∞",
      "–°–µ—Ä–≥–µ–π",
      "–ê–Ω–Ω–∞",
      "–ü–∞–≤–µ–ª",
      "–¢–∞—Ç—å—è–Ω–∞",
      "–í–∏–∫—Ç–æ—Ä",
      "–ù–∞—Ç–∞–ª—å—è",
      "–ê—Ä—Ç—ë–º",
      "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
      "–ú–∞–∫—Å–∏–º",
      "–°–≤–µ—Ç–ª–∞–Ω–∞",
      "–í–ª–∞–¥–∏–º–∏—Ä",
      "–Æ–ª–∏—è",
      "–ê–Ω–¥—Ä–µ–π",
      "–ú–∞—Ä–∏–Ω–∞",
      "–†–æ–º–∞–Ω",
      "–ì–∞–ª–∏–Ω–∞",
      "–ï–≥–æ—Ä",
      "–õ—é–¥–º–∏–ª–∞",
      "–ì–ª–µ–±",
      "–í–µ—Ä–∞",
      "–í–∞—Å–∏–ª–∏—Å–∞",
      "–í–∞–ª–µ—Ä–∏–π",
      "–ü–æ–ª–∏–Ω–∞",
      "–ì–µ–Ω–Ω–∞–¥–∏–π",
      "–ö—Å–µ–Ω–∏—è",
    ];
    const surnames = [
      "–ò–≤–∞–Ω–æ–≤",
      "–ü–µ—Ç—Ä–æ–≤–∞",
      "–°–∏–¥–æ—Ä–æ–≤",
      "–ö—É–∑–Ω–µ—Ü–æ–≤–∞",
      "–°–º–∏—Ä–Ω–æ–≤",
      "–ü–æ–ø–æ–≤–∞",
      "–í–æ–ª–∫–æ–≤",
      "–°–æ–∫–æ–ª–æ–≤–∞",
      "–õ–µ–±–µ–¥–µ–≤",
      "–ö–æ–∑–ª–æ–≤–∞",
      "–ù–æ–≤–∏–∫–æ–≤",
      "–ú–æ—Ä–æ–∑–æ–≤–∞",
      "–ï–≥–æ—Ä–æ–≤",
      "–ü–∞–≤–ª–æ–≤–∞",
      "–°–æ–ª–æ–≤—å—ë–≤",
      "–ë–æ—Ä–∏—Å–æ–≤–∞",
      "–§—ë–¥–æ—Ä–æ–≤",
      "–í–∞—Å–∏–ª—å–µ–≤–∞",
      "–ú–∏—Ö–∞–π–ª–æ–≤",
      "–°—Ç–µ–ø–∞–Ω–æ–≤–∞",
      "–ê–Ω–¥—Ä–µ–µ–≤",
      "–ù–∏–∫–æ–ª–∞–µ–≤–∞",
      "–ú–∞–∫–∞—Ä–æ–≤",
      "–û—Ä–ª–æ–≤–∞",
      "–ó–∞—Ö–∞—Ä–æ–≤",
      "–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞",
      "–ì—Ä–æ–º–æ–≤",
      "–î–∞–Ω–∏–ª–æ–≤–∞",
      "–î–µ–Ω–∏—Å–æ–≤",
      "–ñ—É–∫–æ–≤–∞",
      "–ö–∞–ª–∏–Ω–∏–Ω–∞",
    ];

    const users = [];
    for (let i = 0; i < 30; i++) {
      const name = names[i % names.length];
      const surname = surnames[i % surnames.length];
      const phone = `+37529${(1000000 + i).toString().slice(1)}`;
      const password = await bcrypt.hash("test123", 10);
      users.push(
        await User.create({ name, surname, phone, password, role: "user" })
      );
    }

    // Generate 30 random bookings for today, tomorrow, and the day after
    const today = new Date();
    const dateStrings = [
      today.toISOString().slice(0, 10),
      new Date(today.getTime() + 86400000).toISOString().slice(0, 10),
      new Date(today.getTime() + 2 * 86400000).toISOString().slice(0, 10),
    ];
    const allStops = [
      ...route1_stops,
      ...route1_back_stops,
      ...route2_stops,
      ...route2_back_stops,
      ...route3_stops,
      ...route3_back_stops,
    ];
    for (let i = 0; i < 30; i++) {
      const user = users[i];
      // Pick a random route
      const routeIdx = Math.floor(Math.random() * allRoutes.length);
      const route = allRoutes[routeIdx];
      // Pick a bus for the route
      const bus = buses[routeIdx % buses.length];
      // Pick random departure and arrival stops (ensure they are different and in order)
      const stops = route.stops;
      let depIdx = Math.floor(Math.random() * (stops.length - 1));
      let arrIdx =
        depIdx + 1 + Math.floor(Math.random() * (stops.length - depIdx - 1));
      const departure_stop = stops[depIdx];
      const arrival_stop = stops[arrIdx];
      // Pick a random date
      const date = dateStrings[Math.floor(Math.random() * dateStrings.length)];
      // Pick a random seat
      const seat_number = 1 + Math.floor(Math.random() * bus.seats_total);
      await Booking.create({
        user_id: user._id,
        user_name: user.name,
        phone: user.phone,
        route_id: route._id,
        bus_id: bus._id,
        departure_stop,
        arrival_stop,
        seat_number,
        status: "–û–ø–ª–∞—á–µ–Ω–æ",
        date,
      });
    }

    console.log("‚úÖ Test data loaded");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Error:", error);
    process.exit(1);
  }
};

run();
