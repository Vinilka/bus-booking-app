import express from "express";
import mongoose from "mongoose";
import Route from "../models/Route.js";
import Bus from "../models/Bus.js"; // ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ
import { auth, isModerator, isAdmin } from "../middlewares/authMiddleware.js";

const router = express.Router();

// üîπ Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ObjectId
const validateObjectId = (req, res, next) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–∞—Ä—à—Ä—É—Ç–∞" });
  }
  next();
};

// –ù–∞–π—Ç–∏ –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –µ–¥–µ—Ç –∞–≤—Ç–æ–±—É—Å
router.get("/search", async (req, res) => {
  const { from, to } = req.query;

  try {
    const routes = await Route.find({
      stops: { $all: [from, to] },
    });

    const filtered = routes.filter((route) => {
      const fromIndex = route.stops.indexOf(from);
      const toIndex = route.stops.indexOf(to);
      return fromIndex !== -1 && toIndex !== -1 && fromIndex < toIndex;
    });

    res.json(filtered);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤", error });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
router.get("/all-stops", async (req, res) => {
  try {
    const routes = await Route.find();
    const allStops = [...new Set(routes.flatMap((r) => r.stops))];
    res.json(allStops);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:", error);
    res.status(400).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–æ–∫", error });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–±—É—Å–∞—Ö (–Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç)
router.get("/with-bus-info", async (req, res) => {
  try {
    const routes = await Route.find();

    const enrichedRoutes = await Promise.all(
      routes.map(async (route) => {
        const bus = await Bus.findOne({ route_id: route._id });
        return {
          ...route.toObject(),
          busInfo: bus
            ? {
                bus_id: bus._id,
                driver: bus.driver,
                status: bus.status,
                freeSeats: bus.available_seats,
              }
            : null,
        };
      })
    );

    res.json(enrichedRoutes);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∞–≤—Ç–æ–±—É—Å–∞–º–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤", error });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ö–£–î–ê –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –û–¢–ö–£–î–ê
router.get("/available-to-stops", async (req, res) => {
  const { from } = req.query;
  if (!from) {
    return res
      .status(400)
      .json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" });
  }

  try {
    const routes = await Route.find({ stops: from });

    const toStops = new Set();

    routes.forEach((route) => {
      const fromIndex = route.stops.indexOf(from);
      if (fromIndex !== -1 && fromIndex < route.stops.length - 1) {
        route.stops.slice(fromIndex + 1).forEach((stop) => {
          toStops.add(stop);
        });
      }
    });

    res.json([...toStops]);
  } catch (error) {
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫", error });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
router.get("/:id", validateObjectId, async (req, res) => {
  try {
    const route = await Route.findById(req.params.id);
    if (!route) {
      return res.status(404).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json(route);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", error });
  }
});

// üîπ –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä/–∞–¥–º–∏–Ω)
router.post("/", auth, isModerator, async (req, res) => {
  const { name, stops, departure_time, arrival_time, base_price } = req.body;

  try {
    const newRoute = new Route({
      name,
      stops,
      departure_time,
      arrival_time,
      base_price,
    });
    await newRoute.save();
    res.status(201).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω", route: newRoute });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", error });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
router.put("/:id", auth, isModerator, validateObjectId, async (req, res) => {
  try {
    const updatedRoute = await Route.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );
    if (!updatedRoute) {
      return res.status(404).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ú–∞—Ä—à—Ä—É—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", route: updatedRoute });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", error });
  }
});

// üîπ –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
router.delete("/:id", auth, isAdmin, validateObjectId, async (req, res) => {
  try {
    const deletedRoute = await Route.findByIdAndDelete(req.params.id);
    if (!deletedRoute) {
      return res.status(404).json({ message: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ú–∞—Ä—à—Ä—É—Ç —É–¥–∞–ª—ë–Ω", route: deletedRoute });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞", error });
  }
});

export default router;
