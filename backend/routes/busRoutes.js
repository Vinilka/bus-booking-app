import express from "express";
import mongoose from "mongoose";
import Bus from "../models/Bus.js";
import { auth, isModerator, isAdmin } from "../middlewares/authMiddleware.js";

const router = express.Router();

// ‚úÖ Middleware: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å MongoDB ObjectId
const validateObjectId = (req, res, next) => {
  if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" });
  }
  next();
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤ (–¥–ª—è —Ç–∞–±–ª–∏—Ü –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
router.get("/", async (req, res) => {
  try {
    const buses = await Bus.find().populate("route_id", "name");
    res.json(buses);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–æ–≤", error });
  }
});

// ‚úÖ üîπ –ü–æ–ª—É—á–∏—Ç—å –û–î–ò–ù –∞–≤—Ç–æ–±—É—Å –ø–æ ID –º–∞—Ä—à—Ä—É—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏)
router.get("/by-route/:routeId", async (req, res) => {
  try {
    const bus = await Bus.findOne({ route_id: req.params.routeId });

    if (!bus) {
      return res
        .status(404)
        .json({ message: "–ê–≤—Ç–æ–±—É—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(bus);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞", error });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–±—É—Å –ø–æ ID (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
router.get("/:id", validateObjectId, async (req, res) => {
  try {
    const bus = await Bus.findById(req.params.id).populate("route_id", "name");
    if (!bus) return res.status(404).json({ message: "–ê–≤—Ç–æ–±—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(bus);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞", error });
  }
});
router.put("/:id/assign-driver", auth, isModerator, async (req, res) => {
  const { driverId } = req.body;
  const bus = await Bus.findByIdAndUpdate(
    req.params.id,
    { current_driver: driverId },
    { new: true }
  );
  res.json(bus);
});

router.put("/:id/disable-seat", auth, isAdmin, async (req, res) => {
  const { seatNumber } = req.body;
  const bus = await Bus.findById(req.params.id);
  if (!bus.disabled_seats.includes(seatNumber)) {
    bus.disabled_seats.push(seatNumber);
    await bus.save();
  }
  res.json(bus);
});

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
router.post("/", auth, isModerator, async (req, res) => {
  const { route_id, total_seats, driver, status } = req.body;

  try {
    const newBus = new Bus({
      route_id,
      total_seats,
      available_seats: total_seats,
      occupied_seats: [],
      driver,
      status,
    });

    await newBus.save();
    res.status(201).json({ message: "–ê–≤—Ç–æ–±—É—Å –¥–æ–±–∞–≤–ª–µ–Ω!", bus: newBus });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞", error });
  }
});

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞ –ø–æ ID
router.put("/:id", auth, isModerator, validateObjectId, async (req, res) => {
  try {
    const updated = await Bus.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
    });
    if (!updated) return res.status(404).json({ message: "–ê–≤—Ç–æ–±—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json({ message: "–ê–≤—Ç–æ–±—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", bus: updated });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞", error });
  }
});

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
router.delete("/:id", auth, isAdmin, validateObjectId, async (req, res) => {
  try {
    const deleted = await Bus.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "–ê–≤—Ç–æ–±—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json({ message: "–ê–≤—Ç–æ–±—É—Å —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞", error });
  }
});

export default router;
